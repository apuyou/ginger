<?php

namespace Proxies\__CG__\Entities;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class Authkey extends \Entities\Authkey implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int) $this->_identifier["id"];
        }
        $this->__load();
        return parent::getId();
    }

    public function setAsso($asso)
    {
        $this->__load();
        return parent::setAsso($asso);
    }

    public function getAsso()
    {
        $this->__load();
        return parent::getAsso();
    }

    public function setDetails($details)
    {
        $this->__load();
        return parent::setDetails($details);
    }

    public function getDetails()
    {
        $this->__load();
        return parent::getDetails();
    }

    public function setCle($cle)
    {
        $this->__load();
        return parent::setCle($cle);
    }

    public function getCle()
    {
        $this->__load();
        return parent::getCle();
    }

    public function setDroitEcriture($droitEcriture)
    {
        $this->__load();
        return parent::setDroitEcriture($droitEcriture);
    }

    public function getDroitEcriture()
    {
        $this->__load();
        return parent::getDroitEcriture();
    }

    public function setDroitBadges($droitBadges)
    {
        $this->__load();
        return parent::setDroitBadges($droitBadges);
    }

    public function getDroitBadges()
    {
        $this->__load();
        return parent::getDroitBadges();
    }

    public function setDroitCotisations($droitCotisations)
    {
        $this->__load();
        return parent::setDroitCotisations($droitCotisations);
    }

    public function getDroitCotisations()
    {
        $this->__load();
        return parent::getDroitCotisations();
    }

    public function setCreatedAt($createdAt)
    {
        $this->__load();
        return parent::setCreatedAt($createdAt);
    }

    public function getCreatedAt()
    {
        $this->__load();
        return parent::getCreatedAt();
    }

    public function setUpdatedAt($updatedAt)
    {
        $this->__load();
        return parent::setUpdatedAt($updatedAt);
    }

    public function getUpdatedAt()
    {
        $this->__load();
        return parent::getUpdatedAt();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'asso', 'details', 'cle', 'droitEcriture', 'droitBadges', 'droitCotisations', 'createdAt', 'updatedAt');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields as $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}